/* ==================================== JUCER_BINARY_RESOURCE ====================================

   This is an auto-generated file: Any edits you make may be overwritten!

*/

namespace BinaryData
{

//================== stop.svg ==================
static const unsigned char temp_binary_data_0[] =
"<svg width=\"91\" height=\"76\" viewBox=\"0 0 91 76\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n"
"<path d=\"M87.004 7.27899C82.35 -1.42401 7.79401 -2.39601 2.47401 5.89499C-0.319995 10.249 1.27501 63.808 3.30001 69.104C5.28901 77.268 82.811 77.644 87.305 72.073C91.506 66.898 90.611 14.024 87.004 7.27899ZM60.211 56.816C57.852 57.718 33.992 58.429 "
"32.052 57.184C28.358 54.814 28.792 21.6 32.669 19.527C35.674 17.92 59.229 17.522 61.534 19.393C64.016 21.394 63.848 55.93 60.211 56.816Z\" fill=\"white\"/>\n"
"</svg>\n";

const char* stop_svg = (const char*) temp_binary_data_0;

//================== Group 1.png ==================
static const unsigned char temp_binary_data_1[] =
{ 137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,232,0,0,0,94,8,6,0,0,0,41,58,88,16,0,0,0,9,112,72,89,115,0,0,11,19,0,0,11,19,1,0,154,156,24,0,0,0,1,115,82,71,66,0,174,206,28,233,0,0,0,4,103,65,77,65,0,0,177,143,11,252,97,5,0,0,12,223,73,68,65,84,
120,1,237,157,235,113,220,56,18,199,255,187,117,223,87,23,129,113,17,172,46,2,99,35,176,46,2,243,34,88,57,2,113,35,176,55,130,153,141,192,186,8,56,23,129,229,8,136,141,64,118,4,123,211,71,178,134,194,224,209,13,130,154,25,169,127,85,40,137,131,247,163,
27,13,16,36,1,69,81,20,69,81,20,69,81,20,69,81,20,69,81,20,69,81,20,69,81,148,151,197,15,56,61,87,17,199,229,219,232,30,198,191,138,242,98,120,46,1,37,129,51,123,103,199,191,111,246,238,26,114,97,204,225,246,110,183,119,127,140,127,21,69,137,96,247,238,
110,239,186,189,251,235,4,174,31,203,160,40,202,8,205,134,36,148,143,56,141,80,134,220,71,40,202,133,82,203,196,53,123,215,238,221,123,65,28,55,115,127,226,176,150,156,252,56,121,146,251,25,131,185,108,50,121,253,2,94,186,138,242,98,152,102,204,220,44,
70,51,234,102,239,110,113,88,123,214,198,96,80,18,125,162,12,13,20,229,149,64,130,22,19,134,73,32,62,161,124,29,104,102,238,122,76,39,55,83,78,52,137,178,221,65,81,94,56,100,202,198,214,153,36,24,13,226,179,36,253,110,49,204,166,36,192,159,247,238,203,
24,79,178,118,165,176,221,152,151,9,228,67,191,109,35,113,55,80,148,23,10,205,64,49,129,185,141,196,177,24,132,241,11,214,219,12,34,161,51,129,188,219,72,120,42,203,26,166,182,162,156,140,95,17,30,236,29,142,133,195,98,16,202,231,222,209,189,11,148,251,
38,82,14,21,82,229,172,145,236,226,26,12,102,168,207,111,24,102,169,9,139,65,72,44,120,76,187,183,14,135,93,214,239,120,122,42,200,225,160,0,72,160,222,224,176,54,13,65,225,253,93,91,10,251,25,199,138,228,97,12,171,167,144,148,139,133,132,130,132,211,
159,129,218,89,24,131,252,161,132,249,110,174,197,242,217,203,32,190,33,212,227,88,73,152,72,216,14,138,114,193,208,205,254,148,112,146,233,27,51,101,31,199,176,22,235,114,27,41,131,191,46,54,8,11,169,30,104,80,46,18,131,184,112,210,12,24,155,53,233,
119,139,231,197,32,44,124,119,204,112,22,138,114,97,248,2,248,48,254,110,192,55,45,159,19,82,26,159,145,159,33,105,77,234,207,184,61,20,229,130,104,112,108,174,26,196,133,147,118,109,207,101,87,180,69,120,215,214,204,194,220,34,111,18,43,202,217,226,
11,97,59,254,238,207,80,231,122,140,174,69,126,67,200,183,16,116,22,85,46,2,139,248,192,245,133,243,26,231,139,63,75,126,241,252,45,116,45,170,92,32,254,204,210,204,252,230,51,168,197,249,67,10,164,67,248,64,5,112,92,215,79,80,148,51,198,32,111,246,209,
233,28,139,151,129,63,203,62,66,81,206,24,154,65,98,179,231,75,132,54,182,212,204,85,46,6,127,115,200,224,229,163,102,174,114,17,88,60,29,168,247,120,29,248,102,110,7,69,57,49,63,6,126,187,241,174,95,139,128,62,120,215,22,250,164,139,114,134,248,166,
222,107,26,164,254,201,34,11,69,57,33,254,12,58,189,237,96,98,135,215,245,24,150,63,139,158,243,253,93,229,21,224,11,168,63,32,255,131,215,197,87,239,250,103,40,202,9,241,5,212,122,215,15,120,93,236,188,107,11,69,57,35,104,67,104,190,6,123,109,24,28,
223,15,85,148,179,97,254,82,175,215,122,155,193,223,40,50,80,148,19,145,90,131,126,197,235,196,121,215,186,81,180,30,6,195,185,238,6,47,23,122,219,8,61,139,92,116,55,228,111,179,255,253,129,232,240,58,161,207,80,204,219,194,96,29,166,47,190,205,191,242,
246,198,11,51,189,60,205,141,238,37,125,98,113,254,18,55,186,247,254,22,195,11,232,28,94,14,119,56,60,162,73,117,252,55,132,95,221,155,11,168,47,225,181,54,136,110,16,255,238,231,155,64,120,227,93,135,226,133,126,251,7,234,116,174,243,174,107,237,228,
90,12,131,242,45,248,111,200,15,225,48,116,50,237,176,115,14,145,76,237,63,113,21,184,254,41,227,239,183,181,25,203,240,11,202,48,24,150,80,243,116,27,12,109,244,59,228,199,44,167,58,154,241,122,26,87,87,222,239,211,245,63,145,31,223,20,103,51,150,135,
211,206,62,115,225,156,210,163,58,83,221,72,17,137,21,237,45,158,174,189,106,153,118,61,194,239,44,170,237,12,234,224,183,67,73,231,204,211,162,78,89,235,221,192,61,242,59,205,221,74,121,119,40,195,32,63,38,122,200,250,51,151,158,239,56,230,230,252,145,
202,59,200,184,195,242,126,59,162,133,188,18,28,164,141,119,106,1,109,188,116,191,160,28,169,96,82,91,117,194,56,57,65,185,23,166,199,117,165,138,75,82,191,59,102,154,210,47,22,228,184,67,184,157,13,35,110,35,40,135,104,109,186,133,172,18,92,36,29,194,
113,52,232,251,49,221,13,6,147,129,102,170,90,10,197,226,88,104,74,233,193,175,215,205,44,222,45,100,237,145,170,251,86,144,86,202,81,93,72,16,104,102,249,132,227,51,219,28,126,45,204,215,102,210,149,40,161,92,127,218,68,220,46,19,215,160,76,41,91,48,
184,7,191,18,18,106,105,240,231,250,76,195,53,100,29,154,162,3,191,126,214,139,123,187,32,238,156,79,130,116,168,174,27,12,214,84,51,166,107,80,167,221,13,202,173,169,220,107,117,182,130,180,186,194,50,246,200,207,160,91,200,235,54,213,207,132,18,156,
111,18,205,55,10,66,11,88,234,164,185,214,116,120,250,185,134,24,206,115,223,199,191,148,135,5,255,163,191,211,39,34,74,161,1,111,48,212,115,250,96,240,3,142,235,224,231,177,100,112,254,41,8,235,188,107,18,172,119,224,105,87,26,188,187,136,159,164,205,
28,134,157,198,53,104,81,182,12,217,97,40,147,75,132,73,249,249,124,79,248,209,100,98,34,233,231,62,0,109,33,251,128,245,196,110,239,254,5,70,63,145,102,9,105,25,131,244,76,64,51,91,233,134,82,3,190,150,217,160,12,18,176,7,228,103,142,102,12,111,2,254,
165,72,102,175,16,55,88,222,54,141,160,12,210,221,83,46,70,80,134,185,107,153,233,75,172,141,88,29,239,32,156,221,60,182,88,175,126,255,167,199,177,128,26,240,204,18,10,83,34,164,220,1,40,174,204,140,78,144,199,221,24,199,255,189,148,150,153,111,236,
29,72,87,224,173,105,186,68,25,26,102,25,150,180,113,142,173,160,12,83,123,52,224,211,8,210,190,21,196,231,190,177,242,10,178,250,21,181,117,143,227,14,239,5,25,246,144,115,45,72,255,22,114,26,132,27,61,149,143,13,252,86,74,3,94,221,82,59,197,29,35,126,
159,136,111,153,101,32,87,178,241,147,195,8,242,151,8,197,28,139,242,58,26,132,199,132,164,28,22,178,58,110,152,233,6,223,168,64,56,132,191,92,77,55,109,201,94,38,123,156,214,5,15,51,63,3,249,145,45,201,250,232,1,114,222,123,215,31,246,238,239,163,163,
155,213,161,181,141,223,129,75,214,189,220,184,169,112,75,143,92,74,202,191,164,174,49,26,65,88,202,159,198,150,180,175,157,32,236,188,142,52,243,117,8,239,51,248,227,59,133,5,31,135,225,160,130,152,30,79,37,188,195,83,169,111,2,113,140,23,166,131,28,
174,214,177,144,113,197,44,155,193,241,108,244,8,222,236,148,131,107,33,164,52,106,195,136,159,42,163,97,150,129,92,141,221,90,159,94,144,127,233,94,134,17,228,97,102,241,62,70,194,52,144,177,21,228,191,65,33,143,94,34,254,53,183,112,22,229,249,214,28,
60,214,139,159,50,145,59,28,15,120,206,224,207,97,192,171,91,155,72,195,50,226,167,202,40,89,31,213,198,10,242,46,89,194,204,145,214,49,118,79,182,129,156,173,32,127,11,1,115,19,119,46,0,215,222,245,215,76,225,230,88,200,168,97,6,134,48,222,117,202,92,
249,154,137,91,10,183,204,174,208,175,102,25,74,150,16,57,184,107,90,50,249,62,97,25,142,17,102,106,11,19,201,143,202,177,133,28,233,173,44,54,177,53,232,149,160,0,59,28,127,106,94,130,171,20,198,71,50,227,186,132,223,210,53,40,39,190,195,50,220,66,127,
98,141,245,231,91,70,24,135,245,118,143,67,121,25,132,151,59,191,45,40,135,195,74,196,4,212,64,198,127,103,255,75,159,254,224,220,204,119,144,115,14,2,202,141,191,52,143,26,207,238,214,126,254,151,218,159,163,172,75,159,136,241,113,140,48,212,206,180,
238,52,222,239,52,155,182,40,103,39,8,107,4,97,159,156,36,90,130,67,97,1,152,124,135,28,39,8,187,134,121,55,177,116,6,229,40,154,92,249,29,242,253,66,167,150,184,202,149,243,8,22,71,56,107,62,255,201,81,244,254,210,109,254,251,18,166,19,105,134,17,246,
61,4,2,93,75,64,151,236,254,185,74,97,114,164,202,184,134,121,55,225,63,0,46,205,159,211,182,187,140,63,71,193,25,240,149,43,231,109,143,185,58,59,212,53,109,57,125,24,107,75,139,97,147,106,201,58,248,15,240,158,190,161,117,57,91,49,197,76,92,233,121,
84,131,114,92,165,48,62,146,58,172,41,160,185,180,115,179,95,110,160,79,218,123,73,25,164,112,148,134,201,248,23,221,11,76,176,180,142,36,92,6,229,144,112,59,70,56,106,187,13,152,196,4,212,31,52,57,211,231,77,34,110,13,28,228,56,239,218,224,52,184,140,
127,110,96,153,140,255,239,200,115,10,1,77,141,25,135,178,221,82,100,210,92,130,72,112,2,80,27,127,96,134,181,96,238,112,207,77,92,18,172,73,91,127,197,83,123,253,102,204,60,214,209,215,94,65,37,56,70,152,146,1,38,153,65,125,63,135,131,96,44,125,121,
183,203,248,231,204,207,220,78,232,14,121,56,237,247,195,248,215,224,80,119,250,123,53,115,63,141,191,57,228,73,181,119,237,217,147,168,161,132,44,150,153,186,247,24,76,221,247,140,176,164,12,118,16,148,219,224,240,48,46,253,79,91,209,243,27,172,49,237,
210,96,217,13,103,3,217,233,15,9,156,242,19,22,199,55,147,111,80,231,197,213,13,202,15,41,24,212,57,149,210,160,252,160,67,41,253,51,230,69,88,228,199,17,77,66,219,76,24,238,211,43,49,72,49,245,140,178,144,251,136,5,88,132,7,132,241,194,248,39,129,114,
107,38,31,206,73,151,82,230,175,194,72,125,53,123,235,229,199,49,225,184,88,148,159,160,185,69,29,197,213,100,210,233,80,159,165,74,69,138,65,126,28,81,191,90,70,184,165,237,97,192,23,82,139,5,124,70,92,11,62,70,126,47,33,117,220,239,17,229,180,56,214,
88,102,244,155,58,171,195,186,131,213,32,221,65,169,181,72,170,147,91,240,177,153,50,108,80,159,85,6,100,130,156,162,159,143,205,14,121,193,145,90,130,62,150,145,199,226,241,70,149,150,188,144,169,65,25,125,34,205,37,47,237,162,242,199,20,201,115,13,
160,220,192,177,145,120,13,210,131,77,50,203,95,103,202,208,162,62,181,149,109,105,158,33,65,176,200,143,229,165,166,46,241,137,145,15,185,197,22,91,203,200,164,71,57,41,37,208,97,25,57,51,113,237,129,138,76,158,38,18,167,71,61,37,98,176,142,98,77,177,
70,95,230,72,181,217,189,23,182,67,126,60,44,45,111,108,130,240,157,116,89,24,196,96,88,171,133,26,161,199,50,109,115,143,120,225,55,88,78,131,116,231,81,35,46,53,105,82,164,242,14,113,135,186,74,164,116,22,95,66,40,159,210,221,81,46,41,69,239,231,109,
193,83,218,75,199,69,203,200,195,162,50,22,67,193,91,28,191,185,188,132,45,234,14,200,24,84,86,234,168,13,14,111,175,171,81,254,28,177,129,19,50,249,82,230,104,139,114,86,215,224,30,125,32,31,214,189,191,5,164,20,125,72,208,58,228,133,39,247,90,211,28,
134,145,199,218,227,111,49,45,226,133,111,112,249,196,6,78,231,133,35,65,137,153,68,91,44,35,101,106,173,65,143,103,152,41,60,182,136,215,49,164,28,44,120,179,232,103,44,35,149,118,159,138,248,35,206,131,111,9,63,135,203,135,115,51,154,6,16,9,108,72,
155,210,141,253,6,235,148,129,125,163,124,134,65,126,73,243,181,82,94,211,110,187,101,132,117,9,191,80,222,59,240,198,215,13,202,103,127,147,241,223,165,60,107,29,150,95,202,183,66,191,75,193,69,126,167,65,76,3,144,204,238,247,1,127,170,123,141,135,153,
167,180,66,60,120,215,211,169,161,107,28,62,60,244,6,7,161,52,99,184,29,210,143,138,149,246,219,148,55,185,119,179,114,108,145,63,53,85,162,232,169,125,55,200,179,129,240,228,207,200,187,132,223,212,191,103,143,197,5,219,231,12,104,253,19,170,27,9,199,
99,194,175,230,218,48,102,102,83,254,100,194,245,144,125,182,160,203,228,119,155,200,239,203,24,127,238,114,249,115,214,130,77,34,126,10,110,189,165,166,174,201,164,221,226,66,48,40,107,216,75,161,1,127,224,83,135,182,168,207,86,80,134,26,2,106,43,231,
247,23,242,102,238,13,226,109,154,162,21,148,129,107,234,90,164,119,239,107,88,69,207,70,236,54,64,143,151,129,5,95,48,215,178,24,184,55,205,185,238,158,145,103,131,186,95,183,203,13,234,216,14,120,151,137,199,189,95,57,245,83,238,193,139,143,11,235,
113,150,148,52,236,165,96,16,239,236,13,6,1,94,219,148,111,81,87,64,55,204,124,13,234,9,106,110,38,52,40,31,71,173,160,28,159,51,101,120,76,148,255,22,2,126,192,249,48,105,21,90,56,187,217,223,7,92,62,147,86,37,232,13,11,14,252,29,196,90,76,27,47,62,
223,16,222,248,112,8,19,251,157,91,6,139,225,17,58,3,222,155,38,28,134,49,64,239,189,186,71,126,147,134,20,199,252,3,93,223,192,123,168,221,239,163,111,158,155,226,231,210,33,26,28,43,48,42,251,7,60,111,159,43,202,98,12,14,130,59,185,107,156,238,1,251,
90,76,75,10,154,189,45,20,69,57,43,166,219,85,138,162,40,138,162,40,138,162,40,138,162,40,138,162,40,138,162,40,138,162,40,138,162,40,138,162,40,138,162,40,138,162,40,138,162,40,138,162,40,138,162,40,138,162,40,202,41,248,31,160,89,142,59,137,82,246,
87,0,0,0,0,73,69,78,68,174,66,96,130,0,0 };

const char* Group_1_png = (const char*) temp_binary_data_1;

//================== pause.svg ==================
static const unsigned char temp_binary_data_2[] =
"<svg width=\"89\" height=\"76\" viewBox=\"0 0 89 76\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n"
"<path d=\"M85.497 7.089C80.843 -1.614 6.32 -0.0229955 0.967002 3.56C-0.341998 4.436 -0.231998 63.618 1.793 68.914C3.782 77.078 80.974 75.773 85.957 73.934C90.157 68.76 89.103 13.833 85.497 7.089ZM37.184 57.748C35.745 57.748 33.12 53.527 33.12 37.21C3"
"3.12 21.959 35.258 17.992 37.184 17.992C39.579 17.992 42.043 21.746 42.043 38.19C42.044 54.326 39.373 57.748 37.184 57.748ZM51.005 57.748C49.566 57.748 46.941 53.527 46.941 37.21C46.941 21.959 49.079 17.992 51.005 17.992C53.4 17.992 55.864 21.746 55."
"864 38.19C55.865 54.326 53.195 57.748 51.005 57.748Z\" fill=\"white\"/>\n"
"</svg>\n";

const char* pause_svg = (const char*) temp_binary_data_2;

//================== play.svg ==================
static const unsigned char temp_binary_data_3[] =
"<svg width=\"90\" height=\"76\" viewBox=\"0 0 90 76\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n"
"<path d=\"M87.113 6.914C85.407 -4.24 5.65699 1.26 2.58199 5.53C-0.440006 9.728 -0.0930054 64.51 3.40799 68.739C5.39699 76.903 82.919 77.279 87.413 71.708C91.614 66.534 88.269 14.475 87.113 6.914ZM32.386 57.465C26.248 54.87 26.109 21.896 32.386 17.967"
"C35.415 16.071 61.342 30.77 61.342 38.363C61.342 45.632 36.088 59.03 32.386 57.465Z\" fill=\"white\"/>\n"
"</svg>\n";

const char* play_svg = (const char*) temp_binary_data_3;

//================== Group 1.svg ==================
static const unsigned char temp_binary_data_4[] =
"<svg width=\"232\" height=\"94\" viewBox=\"0 0 232 94\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n"
"<path d=\"M24.0625 40.625L50.1875 39.9375L50.0625 43.375L42.875 44.125L39.6875 74.1875L34.125 74.6875L31.5 45.25L24.375 45.9375L24.0625 40.625Z\" fill=\"black\"/>\n"
"<path d=\"M87 41.75C92.0417 40.1667 96.7917 39.375 101.25 39.375C105.75 39.375 109.417 40.0417 112.25 41.375C113.375 44.125 113.938 47.2917 113.938 50.875C113.938 54.4167 112.958 58.0208 111 61.6875C109.042 65.3542 106.188 68.4167 102.438 70.875C98.7"
"292 73.2917 94.5625 74.5625 89.9375 74.6875L87 41.75ZM95.5 70.375C98.5833 69.125 100.917 66.9375 102.5 63.8125C104.083 60.6458 104.875 57.5 104.875 54.375C104.875 48.2917 103.458 44.4167 100.625 42.75C100.042 42.75 99.2917 42.875 98.375 43.125L95.5 7"
"0.375ZM142.625 74L122.562 74.4375L120.188 40.6875L142.812 40L142.625 43.4375L131.812 44.6875L130.5 55.3125L141.375 55.1875L141.625 59.8125L130.062 58.9375L128.688 70.375L142.812 68.75L142.625 74ZM160 70.25C163.583 70.25 167.021 69.625 170.312 68.375L"
"172.062 73.9375C169.312 74.8125 166.5 75.25 163.625 75.25C160.75 75.25 158.188 74.9375 155.938 74.3125C153.729 73.6875 152.021 72.875 150.812 71.875C150.229 69 149.958 66.1667 150 63.375C150 57.6667 151.062 52.5 153.188 47.875C155.354 43.2083 157.833"
" 39.9583 160.625 38.125L170.5 44.375C165.792 47.375 162.042 51.2083 159.25 55.875C156.5 60.5417 155.125 65.2083 155.125 69.875C156.583 70.125 158.208 70.25 160 70.25ZM204.062 43.4375L193.25 54.75L205.938 73.9375L195.062 74.6875L188.188 60.125L187 61."
"3125L185.625 74.1875L180 74.6875L177.062 40.6875L189.25 39.9375L187.625 55.375L199.5 39.9375L204.062 43.4375ZM209.375 51.4375C209.375 46.6458 211.938 42.2083 217.062 38.125L226.438 44.375C222.188 47.0417 220.062 49.875 220.062 52.875C220.062 54.125 2"
"20.479 55.4583 221.312 56.875C222.188 58.25 223.062 59.625 223.938 61C224.812 62.375 225.25 63.6667 225.25 64.875C225.25 69.7917 221.833 73.6042 215 76.3125L212.562 73C214.229 72.0833 215.375 71.2083 216 70.375C216.667 69.5 217 68.5417 217 67.5C217 6"
"6.4583 216.604 65.3125 215.812 64.0625C215.021 62.7708 214.146 61.6042 213.188 60.5625C212.229 59.4792 211.354 58.125 210.562 56.5C209.771 54.8333 209.375 53.1458 209.375 51.4375Z\" fill=\"black\"/>\n"
"<path d=\"M59.966 48.874C61.0906 49.0641 62.7088 49.0412 63.7443 49.5127C65.2111 50.1806 65.3221 51.6422 65.5247 53.1499C65.7892 55.1185 66.6143 60.1307 65.207 61.8215C64.5258 62.64 61.5997 63.4376 60.3182 62.9057C58.4604 62.1346 58.6222 60.4696 58.5"
"188 58.9446C58.3303 56.1646 57.3448 50.3853 60.0964 48.7975C62.1071 47.6372 60.2932 44.512 58.2765 45.6757C53.4726 48.4478 54.5163 55.5901 54.9957 60.3022C55.5027 65.2861 59.0818 67.2843 63.8575 66.4544C69.4769 65.4779 69.5894 59.9907 69.3273 55.2982"
"C69.1962 52.9517 69.1068 49.8494 67.8011 47.8081C66.4174 45.6449 63.1813 45.7693 60.9245 45.3878C58.6548 45.0041 57.6792 48.4874 59.966 48.874Z\" fill=\"black\"/>\n"
"<path d=\"M15.4204 49.6984C16.7209 51.8847 17.6413 53.9789 17.4423 56.5805C17.4028 57.0975 17.0141 60.2364 16.5398 60.8219C15.5069 62.0971 13.4455 62.5591 12.1121 61.7537C9.51899 60.1875 9.24312 57.597 9.33297 54.7321C9.36532 53.7007 9.22353 51.8444 "
"9.89284 50.9453C11.4666 48.831 13.434 48.9954 15.6386 49.6984C17.8551 50.4053 18.8038 46.9159 16.5971 46.2122C11.8054 44.6841 7.37819 45.6993 6.14163 51.0734C5.17831 55.2599 5.15279 61.9683 9.33068 64.4021C12.9449 66.5076 17.4098 68.2109 19.4902 63.3"
"903C21.7954 58.0488 21.4555 52.7853 18.5339 47.8736C17.3463 45.8772 14.2277 47.6933 15.4204 49.6984Z\" fill=\"black\"/>\n"
"<path d=\"M5.663 58.9799C5.60153 47.6204 5.26914 37.1723 10.2689 26.7334C16.5277 13.6657 28.5244 12.2636 41.8533 12.2049C48.4865 12.1757 52.6297 12.9114 57.6237 17.3937C61.7777 21.1221 64.2192 23.039 65.9397 28.5071C69.1289 38.6429 69.1141 48.1109 69"
".1097 58.6184C69.1088 60.9448 72.7145 60.9486 72.7155 58.6184C72.7181 52.4374 73.3875 45.7593 72.4903 39.6295C71.7301 34.435 70.3748 26.5419 67.5797 21.9678C65.2186 18.104 59.4355 13.3699 55.7015 10.8668C51.7225 8.19943 46.477 8.57469 41.8533 8.58949"
"C30.6893 8.62522 16.9153 9.377 10.0676 19.537C1.88701 31.6745 1.98087 44.8682 2.05723 58.9799C2.06982 61.3056 5.67561 61.3105 5.663 58.9799Z\" fill=\"black\"/>\n"
"<path d=\"M15.994 26.808C20.7357 21.0459 28.7484 18.9928 35.8787 18.6552C39.833 18.468 45.0721 17.9881 48.7905 19.5278C52.0204 20.8651 55.0102 24.2169 57.7577 26.4001C59.5577 27.8304 62.126 25.2887 60.3074 23.8436C56.8982 21.1346 53.2064 17.1687 48.9"
"707 15.7039C44.9793 14.3236 39.9777 14.8948 35.8787 15.0399C27.923 15.3214 18.6997 17.8651 13.4443 24.2515C11.9783 26.0329 14.5154 28.6048 15.994 26.808Z\" fill=\"black\"/>\n"
"</svg>\n";

const char* Group_1_svg = (const char*) temp_binary_data_4;


const char* getNamedResource (const char* resourceNameUTF8, int& numBytes)
{
    unsigned int hash = 0;

    if (resourceNameUTF8 != nullptr)
        while (*resourceNameUTF8 != 0)
            hash = 31 * hash + (unsigned int) *resourceNameUTF8++;

    switch (hash)
    {
        case 0x663b24a7:  numBytes = 505; return stop_svg;
        case 0xa16d473b:  numBytes = 3402; return Group_1_png;
        case 0x3175289b:  numBytes = 671; return pause_svg;
        case 0x7000bed9:  numBytes = 452; return play_svg;
        case 0xa16d5376:  numBytes = 4559; return Group_1_svg;
        default: break;
    }

    numBytes = 0;
    return nullptr;
}

const char* namedResourceList[] =
{
    "stop_svg",
    "Group_1_png",
    "pause_svg",
    "play_svg",
    "Group_1_svg"
};

const char* originalFilenames[] =
{
    "stop.svg",
    "Group 1.png",
    "pause.svg",
    "play.svg",
    "Group 1.svg"
};

const char* getNamedResourceOriginalFilename (const char* resourceNameUTF8)
{
    for (unsigned int i = 0; i < (sizeof (namedResourceList) / sizeof (namedResourceList[0])); ++i)
    {
        if (namedResourceList[i] == resourceNameUTF8)
            return originalFilenames[i];
    }

    return nullptr;
}

}
